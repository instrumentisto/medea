language: rust
os: linux

install:
  - rustc -vV
  - cargo -vV

stages:
  - name: check
    if: (branch = master AND type != pull_request)
        OR commit_message =~ /.*\[run ci\]/
  - name: build
    if: (branch = master AND type != pull_request)
        OR commit_message =~ /.*\[run ci\]/
  - name: test
    if: (branch = master AND type != pull_request)
        OR commit_message =~ /.*\[run ci\]/
  - name: release
    if: tag IS present

jobs:
  allow_failures:
    - rust: nightly
      stage: check
    - rust: nightly
      stage: build

  include:
    - name: Clippy
      stage: check
      rust: stable
      before_script: rustup component add clippy
      script: make lint

    - name: rustfmt
      stage: check
      rust: nightly
      before_script: rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu
      script: make fmt check=yes

    - name: medea-jason (stable)
      stage: build
      rust: stable
      before_script:
        - rm -f /home/travis/.cargo/bin/wasm-pack
        - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      script: make cargo.build crate=medea-jason dockerized=no debug=no

    - name: medea docker (stable)
      stage: build
      rust: stable
      services: ["docker"]
      script: make docker.build.medea debug=no
              TAG=build-${TRAVIS_BUILD_ID} registry=quay.io
      before_deploy: echo "$QUAYIO_PASS"
                     | make docker.auth registry=quay.io
                                        user=$QUAYIO_USER pass-stdin=yes
      deploy:
        provider: script
        script: make docker.push IMAGE=medea registry=quay.io
                                 TAGS=build-${TRAVIS_BUILD_ID}
        on:
          all_branches: true

    - name: medea (beta)
      stage: build
      if: branch = master
      rust: beta
      script: make cargo.build crate=medea dockerized=no

    - name: medea (nightly)
      stage: build
      if: branch = master
      rust: nightly
      script: make cargo.build crate=medea dockerized=no

    - name: unit medea-macro (stable)
      stage: test
      rust: stable
      script: make test.unit crate=medea-macro

    - name: unit medea-reactive (stable)
      stage: test
      rust: stable
      script: make test.unit crate=medea-reactive

    - name: unit medea-coturn-telnet-client (stable)
      stage: test
      rust: stable
      script: make test.unit crate=medea-coturn-telnet-client

    - name: unit medea-client-api-proto (stable)
      stage: test
      rust: stable
      script: make test.unit crate=medea-client-api-proto

    - name: unit medea (stable)
      stage: test
      rust: stable
      script: make test.unit crate=medea

    - name: unit medea-jason (stable, Chrome)
      stage: test
      rust: stable
      services: ["docker"]
      before_script:
        # With `cargo pkgid` we get version of `wasm-bindgen` from Cargo.lock.
        - cargo install -f wasm-bindgen-cli
                --version `cargo pkgid wasm-bindgen | grep -o '#.*'
                                                    | grep -o '[0-9\.]*'`
        - rustup target add wasm32-unknown-unknown
      script: make test.unit crate=medea-jason browser=chrome

    - name: unit medea-jason (stable, Firefox)
      stage: test
      rust: stable
      services: ["docker"]
      before_script:
        # With `cargo pkgid` we get version of `wasm-bindgen` from Cargo.lock.
        - cargo install -f wasm-bindgen-cli
                --version `cargo pkgid wasm-bindgen | grep -o '#.*'
                                                    | grep -o '[0-9\.]*'`
        - rustup target add wasm32-unknown-unknown
      script: make test.unit crate=medea-jason browser=firefox

    - name: E2E (stable)
      stage: test
      rust: stable
      services: ["docker"]
      before_script: make docker.pull TAGS=build-${TRAVIS_BUILD_ID}
                                      registry=quay.io
      script: make test.e2e up=yes dockerized=yes log=yes wait=30
                            TAG=build-${TRAVIS_BUILD_ID} registry=quay.io

    - name: crates.io
      stage: release
      if: tag =~ ^medea[a-z-]*-[0-9]+\.[0-9]+\.[0-9]+
      before_script:
        - export MEDEA_CRATE_NAME=$(echo $TRAVIS_TAG \
                        | sed -E "s/^(medea[a-z-]*)-[0-9]+\.[0-9]+\.[0-9]+/\1/")
      script:
        - echo "Releasing $MEDEA_CRATE_NAME to crates.io..."
      deploy:
        provider: script
        script: make release.crates crate=$MEDEA_CRATE_NAME publish=yes
        on:
          tags: true

    - name: NPM
      stage: release
      if: tag =~ ^medea-jason-[0-9]+\.[0-9]+\.[0-9]+
      before_script:
        - export MEDEA_CRATE_NAME=$(echo $TRAVIS_TAG \
                        | sed -E "s/^(medea[a-z-]*)-[0-9]+\.[0-9]+\.[0-9]+/\1/")
      script:
        - echo "Releasing $MEDEA_CRATE_NAME to NPM..."
      before_deploy:
        - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      deploy:
        provider: script
        script: make release.npm crate=$MEDEA_CRATE_NAME publish=yes
        on:
          tags: true

    - name: GitHub
      stage: release
      if: tag =~ ^medea[a-z-]*-[0-9]+\.[0-9]+\.[0-9]+
      before_script:
        - export MEDEA_CRATE_NAME=$(echo $TRAVIS_TAG \
                        | sed -E "s/^(medea[a-z-]*)-[0-9]+\.[0-9]+\.[0-9]+/\1/")
      script:
        - echo "Releasing $MEDEA_CRATE_NAME to GitHub..."
      deploy:
        provider: releases
        token: $GH_TOKEN
        name: $TRAVIS_TAG
        on:
          tags: true

notifications:
  email:
    on_success: never
    on_failure: always
